showResult(html, type) {
                const resultDiv = document.getElementById('result');
                resultDiv.className = `result ${type}`;
                
                if (type === 'loading') {
                    resultDiv.innerHTML = `<div class="loading-spinner"></div>${html}`;
                } else {
                    resultDiv.innerHTML = html;
                }
            }

            showCameraTroubleshooting() {
                const troubleshootingDiv = document.createElement('div');
                troubleshootingDiv.className = 'ingredient-list';
                troubleshootingDiv.innerHTML = `
                    <h4>üì± Camera Troubleshooting:</h4>
                    <ul style="list-style: disc; margin-left: 20px;">
                        <li>Make sure you're using <strong>HTTPS</strong> (camera only works on secure sites)</li>
                        <li>Try refreshing the page and clicking "Allow" when prompted</li>
                        <li>Check if other apps are using the camera</li>
                        <li>Try switching to Chrome or Safari</li>
                        <li>On iPhone: Settings ‚Üí Safari ‚Üí Camera = Allow</li>
                        <li>Use manual barcode entry as a backup!</li>
                    </ul>
                `;
                
                const resultDiv = document.getElementById('result');
                resultDiv.appendChild(troubleshootingDiv);
            }<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beef Detector</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            min-height: 100vh;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px 0;
        }

        .header h1 {
            color: #2d3748;
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            color: #718096;
            font-size: 16px;
        }

        .scanner-container {
            position: relative;
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 2px dashed #cbd5e0;
        }

        #scanner {
            width: 100%;
            height: 250px;
            background: #000;
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }

        #scanner video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 10px;
        }

        .scanner-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 200px;
            height: 100px;
            border: 2px solid #48bb78;
            border-radius: 10px;
            background: transparent;
            z-index: 10;
        }

        .scanner-overlay::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            border-radius: 10px;
            background: linear-gradient(45deg, transparent 30%, rgba(72, 187, 120, 0.3) 50%, transparent 70%);
            animation: scan 2s linear infinite;
        }

        @keyframes scan {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .btn {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #48bb78, #38a169);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(72, 187, 120, 0.4);
        }

        .btn-secondary {
            background: #e2e8f0;
            color: #4a5568;
        }

        .btn-secondary:hover {
            background: #cbd5e0;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .result {
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
            font-size: 18px;
            min-height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .result.safe {
            background: linear-gradient(135deg, #c6f6d5, #9ae6b4);
            color: #22543d;
            border: 2px solid #48bb78;
        }

        .result.unsafe {
            background: linear-gradient(135deg, #fed7d7, #feb2b2);
            color: #742a2a;
            border: 2px solid #f56565;
        }

        .result.loading {
            background: linear-gradient(135deg, #bee3f8, #90cdf4);
            color: #2a4365;
            border: 2px solid #4299e1;
        }

        .result.error {
            background: linear-gradient(135deg, #feebc8, #fbd38d);
            color: #744210;
            border: 2px solid #ed8936;
        }

        .loading-spinner {
            width: 24px;
            height: 24px;
            border: 3px solid #e2e8f0;
            border-top: 3px solid #4299e1;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .ingredient-list {
            background: #f7fafc;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            border-left: 4px solid #4299e1;
        }

        .ingredient-list h4 {
            color: #2d3748;
            margin-bottom: 10px;
        }

        .ingredient-list ul {
            list-style: none;
            padding: 0;
        }

        .ingredient-list li {
            padding: 5px 0;
            color: #4a5568;
        }

        .beef-ingredient {
            background: #fed7d7;
            color: #742a2a;
            padding: 3px 8px;
            border-radius: 5px;
            font-weight: 600;
        }

        .manual-input {
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .manual-input h3 {
            margin-bottom: 15px;
            color: #2d3748;
        }

        .input-group {
            display: flex;
            gap: 10px;
        }

        .input-group input {
            flex: 1;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
        }

        .input-group input:focus {
            outline: none;
            border-color: #4299e1;
        }

        .status {
            text-align: center;
            padding: 10px;
            color: #718096;
            font-size: 14px;
        }

        @media (max-width: 480px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü•© Beef Detector</h1>
            <p>Scan barcodes to check for beef ingredients</p>
        </div>

        <div class="scanner-container">
            <div id="scanner">
                <div class="scanner-overlay"></div>
            </div>
        </div>

        <div class="controls">
            <button id="startBtn" class="btn btn-primary">Start Scanner</button>
            <button id="stopBtn" class="btn btn-secondary" disabled>Stop Scanner</button>
        </div>

        <div class="manual-input">
            <h3>Manual Barcode Entry</h3>
            <div class="input-group">
                <input type="text" id="manualBarcode" placeholder="Enter barcode manually">
                <button id="checkManual" class="btn btn-primary">Check</button>
            </div>
        </div>

        <div id="result" class="status">
            Ready to scan. Point your camera at a barcode.
        </div>
    </div>

    <script>
        class BeefDetector {
            constructor() {
                this.isScanning = false;
                this.currentStream = null;
                this.beefTerms = [
                    // Japanese terms for beef
                    'ÁâõËÇâ', 'Áâõ', '„Éì„Éº„Éï', 'ÁâõËÑÇ', 'Áâõ„Ç®„Ç≠„Çπ', 'ÁâõÈ™®', 'ÁâõÁî±Êù•',
                    'ÂíåÁâõ', 'ÈªíÊØõÂíåÁâõ', 'Áâõ„Åô„Åò', 'Áâõ„Å≤„ÅçËÇâ', 'Áâõ„Éê„É©',
                    // English terms
                    'beef', 'cow', 'bovine', 'cattle', 'steer', 'bull',
                    'beef extract', 'beef fat', 'beef tallow', 'gelatin'
                ];
                this.init();
            }

            init() {
                this.bindEvents();
                this.checkCameraSupport();
            }

            bindEvents() {
                document.getElementById('startBtn').addEventListener('click', () => this.startScanner());
                document.getElementById('stopBtn').addEventListener('click', () => this.stopScanner());
                document.getElementById('checkManual').addEventListener('click', () => this.checkManualBarcode());
                document.getElementById('manualBarcode').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.checkManualBarcode();
                });
            }

            checkCameraSupport() {
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    this.showResult('Camera not supported on this device', 'error');
                    document.getElementById('startBtn').disabled = true;
                }
            }

            async startScanner() {
                const self = this; // Preserve this context
                try {
                    self.showResult('Starting camera...', 'loading');
                    
                    // Stop any existing scanner
                    if (self.isScanning) {
                        self.stopScanner();
                    }

                    // Try different camera configurations
                    let stream;
                    const configs = [
                        { video: { facingMode: 'environment' } },
                        { video: { facingMode: { exact: 'environment' } } },
                        { video: { facingMode: 'user' } },
                        { video: true }
                    ];

                    for (let config of configs) {
                        try {
                            stream = await navigator.mediaDevices.getUserMedia(config);
                            break;
                        } catch (e) {
                            console.log('Config failed:', config, e.message);
                        }
                    }

                    if (!stream) {
                        throw new Error('No camera configuration worked');
                    }

                    self.currentStream = stream;

                    // Create video element manually for better control
                    const video = document.createElement('video');
                    video.srcObject = stream;
                    video.setAttribute('playsinline', true);
                    video.style.width = '100%';
                    video.style.height = '100%';
                    video.style.objectFit = 'cover';
                    
                    const scanner = document.getElementById('scanner');
                    scanner.innerHTML = '<div class="scanner-overlay"></div>';
                    scanner.appendChild(video);
                    
                    video.play();

                    Quagga.init({
                        inputStream: {
                            name: "Live",
                            type: "LiveStream",
                            target: video,
                            constraints: {
                                width: { min: 320, max: 800 },
                                height: { min: 240, max: 600 }
                            }
                        },
                        decoder: {
                            readers: [
                                "code_128_reader",
                                "ean_reader",
                                "ean_8_reader",
                                "code_39_reader",
                                "codabar_reader"
                            ]
                        },
                        locate: true,
                        locator: {
                            patchSize: "medium",
                            halfSample: true
                        }
                    }, (err) => {
                        if (err) {
                            console.error('Quagga init error:', err);
                            self.showResult('Scanner initialization failed. Try manual entry.', 'error');
                            return;
                        }
                        
                        Quagga.start();
                        self.isScanning = true;
                        document.getElementById('startBtn').disabled = true;
                        document.getElementById('stopBtn').disabled = false;
                        self.showResult('üì± Scanner active! Point at a barcode', 'loading');
                    });

                    Quagga.onDetected((result) => {
                        if (result.codeResult && result.codeResult.code) {
                            const code = result.codeResult.code;
                            console.log('Barcode detected:', code);
                            self.checkBarcode(code);
                            // Stop scanner after successful scan
                            setTimeout(() => self.stopScanner(), 1000);
                        }
                    });

                } catch (error) {
                    console.error('Camera error:', error);
                    self.showResult(`Camera error: ${error.message}. Please use manual entry below.`, 'error');
                    self.showCameraTroubleshooting();
                }
            }

            stopScanner() {
                if (this.isScanning) {
                    Quagga.stop();
                    this.isScanning = false;
                }
                
                if (this.currentStream) {
                    this.currentStream.getTracks().forEach(track => track.stop());
                    this.currentStream = null;
                }

                document.getElementById('startBtn').disabled = false;
                document.getElementById('stopBtn').disabled = true;
                this.showResult('Scanner stopped', 'error');
            }

            checkManualBarcode() {
                const barcode = document.getElementById('manualBarcode').value.trim();
                if (!barcode) {
                    this.showResult('Please enter a barcode', 'error');
                    return;
                }
                this.checkBarcode(barcode);
            }

            async checkBarcode(barcode) {
                this.showResult('Checking barcode: ' + barcode, 'loading');
                
                try {
                    // Try to get product info from Open Food Facts API
                    const response = await fetch(`https://world.openfoodfacts.org/api/v0/product/${barcode}.json`);
                    const data = await response.json();
                    
                    if (data.status === 1 && data.product) {
                        this.analyzeProduct(data.product, barcode);
                    } else {
                        // Fallback: simulate product analysis
                        this.simulateProductCheck(barcode);
                    }
                } catch (error) {
                    console.error('API Error:', error);
                    this.simulateProductCheck(barcode);
                }
            }

            analyzeProduct(product, barcode) {
                const ingredients = product.ingredients_text || product.ingredients_text_en || product.ingredients_text_ja || '';
                const productName = product.product_name || product.product_name_en || product.product_name_ja || 'Unknown Product';
                
                const containsBeef = this.containsBeef(ingredients);
                const beefIngredients = this.findBeefIngredients(ingredients);
                
                let resultHtml = `<strong>${productName}</strong><br>Barcode: ${barcode}<br><br>`;
                
                if (containsBeef) {
                    resultHtml += `‚ùå <strong>CONTAINS BEEF</strong>`;
                    if (beefIngredients.length > 0) {
                        resultHtml += `<div class="ingredient-list">
                            <h4>Beef ingredients found:</h4>
                            <ul>`;
                        beefIngredients.forEach(ingredient => {
                            resultHtml += `<li><span class="beef-ingredient">${ingredient}</span></li>`;
                        });
                        resultHtml += `</ul></div>`;
                    }
                    this.showResult(resultHtml, 'unsafe');
                } else {
                    resultHtml += `‚úÖ <strong>NO BEEF DETECTED</strong>`;
                    if (ingredients) {
                        resultHtml += `<div class="ingredient-list">
                            <h4>Ingredients:</h4>
                            <p style="font-size: 14px; line-height: 1.4;">${ingredients.substring(0, 200)}${ingredients.length > 200 ? '...' : ''}</p>
                        </div>`;
                    }
                    this.showResult(resultHtml, 'safe');
                }
            }

            simulateProductCheck(barcode) {
                // Simulate checking for demonstration
                setTimeout(() => {
                    const isBeefProduct = Math.random() < 0.3; // 30% chance of containing beef for demo
                    
                    let resultHtml = `Product: ${barcode}<br><br>`;
                    
                    if (isBeefProduct) {
                        resultHtml += `‚ùå <strong>CONTAINS BEEF</strong><br><small>(Simulated result - product not found in database)</small>`;
                        this.showResult(resultHtml, 'unsafe');
                    } else {
                        resultHtml += `‚úÖ <strong>NO BEEF DETECTED</strong><br><small>(Simulated result - product not found in database)</small>`;
                        this.showResult(resultHtml, 'safe');
                    }
                }, 1500);
            }

            containsBeef(text) {
                if (!text) return false;
                const lowerText = text.toLowerCase();
                return this.beefTerms.some(term => lowerText.includes(term.toLowerCase()));
            }

            findBeefIngredients(text) {
                if (!text) return [];
                const lowerText = text.toLowerCase();
                return this.beefTerms.filter(term => lowerText.includes(term.toLowerCase()));
            }

            showCameraTroubleshooting() {
                const troubleshootingDiv = document.createElement('div');
                troubleshootingDiv.className = 'ingredient-list';
                troubleshootingDiv.innerHTML = `
                    <h4>üì± Camera Troubleshooting:</h4>
                    <ul style="list-style: disc; margin-left: 20px;">
                        <li>Make sure you're using <strong>HTTPS</strong> (camera only works on secure sites)</li>
                        <li>Try refreshing the page and clicking "Allow" when prompted</li>
                        <li>Check if other apps are using the camera</li>
                        <li>Try switching to Chrome or Safari</li>
                        <li>On iPhone: Settings ‚Üí Safari ‚Üí Camera = Allow</li>
                        <li>Use manual barcode entry as a backup!</li>
                    </ul>
                `;
                
                const resultDiv = document.getElementById('result');
                resultDiv.appendChild(troubleshootingDiv);
            }
        }

        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            new BeefDetector();
        });
    </script>
</body>
</html>
